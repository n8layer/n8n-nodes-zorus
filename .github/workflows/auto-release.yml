name: Auto Release

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE.md'
      - '.github/**'
      - 'package.json'  # Prevent infinite loops

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and test
        run: |
          pnpm run build
          pnpm run lint

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if release needed
        id: check_changes
        run: |
          # Check if there are any changes since last tag
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            if [ -z "$(git log $LAST_TAG..HEAD --oneline)" ]; then
              echo "No changes since last tag"
              echo "should_release=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected since last tag"
              echo "should_release=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "No previous tags found, creating first release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Bump version and create release
        if: steps.check_changes.outputs.should_release == 'true'
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Increment patch version
          NEW_VERSION=$(node -p "
            const version = require('./package.json').version;
            const parts = version.split('.');
            parts[2] = (parseInt(parts[2]) + 1).toString();
            parts.join('.');
          ")
          echo "New version: $NEW_VERSION"

          # Update package.json
          node -p "
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            JSON.stringify(pkg, null, 2);
          " > package.json.tmp && mv package.json.tmp package.json

          # Commit version bump
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"

          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin master --tags

          # Set output for next step
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        id: version_bump

      - name: Create GitHub Release
        if: steps.check_changes.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ steps.version_bump.outputs.new_version }}" \
            --title "Release v${{ steps.version_bump.outputs.new_version }}" \
            --notes "## Changes

          Auto-generated release for version ${{ steps.version_bump.outputs.new_version }}

          ### What's Changed
          - Automated version bump and release

          **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ steps.version_bump.outputs.new_version }}" \
            --latest

      - name: Publish to NPM
        if: steps.check_changes.outputs.should_release == 'true'
        run: |
          # Setup npm authentication
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

          # Publish to NPM
          pnpm publish --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.npm_token }}
